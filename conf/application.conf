# Copyright 2023 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

include "backend.conf"

appName = national-insurance-record

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
play.modules.enabled += "uk.gov.hmrc.internalauth.client.modules.InternalAuthModule"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform backend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
play.modules.enabled += "uk.gov.hmrc.nationalinsurancerecord.config.HmrcModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# The context which the API will have via the API Platform http://API_GATEWAY/{api.gateway.context}/
api.gateway.context = "national-insurance-record"

# Session Timeout
# ~~~~
# The default session timeout for the app is 15 minutes (900seconds).
# Updating this is the responsibility of the app - it must issue a new cookie with each request or the session will
# timeout 15 minutes after login (regardless of user activity).
# session.maxAge=900

# Session configuration
# ~~~~~
application.session.httpOnly = false

application.session.secure = false

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG

# Microservice specific config

auditing {
  enabled = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

# API Access Configuration
api {
  access {
    type = PUBLIC
    whitelist.applicationIds = []
  }
  status = STABLE
}

microservice {
  services {

    auth {
      host = localhost
      port = 8500
    }

    internal-auth {
      host = localhost
      port = 8470
    }

    service-locator {
      host = localhost
      port = 9602
      enabled = false
    }

    citizen-details {
      host = localhost
      port = 9337
    }

    state-pension {
      host = localhost
      port = 9311
    }

    nps-hod {
      host = localhost
      port = 9306
      originatoridkey = localkey
      originatoridvalue = localid
    }

    des-hod {
      host = localhost
      port = 9306
      authorizationToken = "Local"
      environment = "local"
    }

    ni-and-sp-proxy-cache {
      host = localhost
      port = 10140
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/nationalinsurancerecord"
  collectionName = "responses"
  responseTTL = 60
}
